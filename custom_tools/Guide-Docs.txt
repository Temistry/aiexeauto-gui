Custom Tools Making Guide
================================================================
본 문서파일은 자동생성된 문서이며 언제든 변경될 수 있으므로 
여기에 중요한 정보를 담지 마세요.
================================================================

이 문서는 인공지능 에이전트에 새로운 사용자도구(Custom Tool)를 부여하는 방법에 대해 설명합니다.  
각 단계를 순서대로 따라 하면 원하는 도구를 에이전트에 간단하게 추가할 수 있습니다.

-------------------------------------------------------------------------------
1. 도구의 스펙(Specification) 정의
-------------------------------------------------------------------------------
도구를 정의할 때는 먼저 JSON 포맷의 스펙 파일을 준비해야 합니다.  
파일의 이름은 다음과 같은 형식을 따릅니다.

{toolName}.json

예시:
```json
{
    "description": "Sum two numbers.",
    "instructions": [
        "float number is allowed.",
        "Negative numbers are not allowed"
    ],
    "input": [
        {
            "number1": 0,
            "number2": 0
        },
        {
            "number1": "First number to sum",
            "number2": "Second number to sum"
        }
    ],
    "npm_package_list": [
        "mathjs"
    ],
    "activate": true,
    "return_description": "Number of sum"
}
```

위 JSON 파일에 대한 상세 설명은 아래와 같습니다:

1) **description**  
   - 해당 도구가 수행할 기능의 간단한 설명입니다.  
   - 예: "Sum two numbers."

2) **instructions**  
   - 도구 사용 시 주의사항이나 입력 데이터 형태 등의 간단한 안내사항을 배열로 기술합니다.  
   - 예:  
     - "float number is allowed." (소수점이 있는 숫자도 허용)  
     - "Negative numbers are not allowed" (음수는 허용하지 않음)

3) **input**  
   - 도구 사용 시 필요한 입력 파라미터에 대한 정의가 들어갑니다.  
   - 예시에서는 배열 형태로 두 가지 정보를 담았는데,  
     - 첫 번째 객체(`{ "number1": 0, "number2": 0 }`)는 입력값의 형식을 간단히 명시합니다.  
     - 두 번째 객체(`{ "number1": "First number to sum", "number2": "Second number to sum" }`)는 각 입력 파라미터에 대한 설명을 추가로 담고 있습니다.

4) **npm_package_list**  
   - 이 도구를 구현할 때 필요한 NPM 패키지 목록입니다.  
   - 예에서는 "mathjs"가 필요하므로 `"mathjs"`를 지정했습니다.  

5) **activate**  
   - 해당 도구의 활성화 여부를 나타내는 불리언 값입니다.  
   - `true`면 에이전트에서 이 도구를 사용 가능하도록 설정한다는 의미입니다.

6) **return_description**
   - 도구가 반환하는 값에 대한 설명입니다.
   - 예: "Number of sum" (두 숫자의 합계)

-------------------------------------------------------------------------------
2. 실제 도구(Javascript 파일) 구현
-------------------------------------------------------------------------------
스펙에 정의된 내용을 바탕으로 실제 동작할 자바스크립트 파일을 작성합니다.  
파일의 이름은 다음과 같은 형식을 따릅니다.

{toolName}.js

예시:
```js
async function tool({ number1, number2 }) {
    const mathjs = require('mathjs');
    console.log(`${number1} + ${number2} = ${mathjs.add(number1, number2)}`);
}
```

- **코드는 오직 함수 한 개로만 구성**되며, `export` 키워드 등 다른 코드는 추가해서는 안 됩니다.  
- 함수 정의 외부에는 어떤 코드도 작성하면 안 됩니다.  
- JSON의 `input` 배열에 정의해둔 파라미터 이름(`number1`, `number2`)을 함수의 매개변수로 그대로 받는 모습을 확인할 수 있습니다. 이 부분을 일치시켜주세요.
- `npm_package_list`에 명시된 패키지(`mathjs`)는 함수 내부에서 `require` 구문으로 불러와서 사용해야 합니다(함수 밖에서 `require`하면 안 됩니다).

이상으로 Custom Tool을 작성하기 위한 기본적인 가이드였습니다.  

-------------------------------------------------------------------------------
(End of Document)
-------------------------------------------------------------------------------
