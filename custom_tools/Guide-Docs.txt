================================================================
Custom Tools Making Guide (최신 수정판)
================================================================

본 문서파일은 자동생성된 문서이며 언제든 변경될 수 있으므로
여기에 중요한 정보를 담지 마세요.

이 문서는 인공지능 에이전트에 새로운 사용자도구(Custom Tool)를
부여하는 방법에 대해 설명합니다.
각 단계를 순서대로 따라 하면 원하는 도구를 에이전트에
간단하게 추가할 수 있습니다.

----------------------------------------------------------------
1. 도구의 스펙(Specification) 정의
----------------------------------------------------------------

도구를 정의할 때는 먼저 JSON 포맷의 스펙 파일을 준비해야 합니다.
파일의 이름은 다음과 같은 형식을 따릅니다.

{toolName}.json

(예시 JSON / 새로운 포맷)

{
    "description": "Sum two numbers.",
    "instructions": [
        "float number is allowed.",
        "Negative numbers are not allowed"
    ],
    "return_description": "Number of sum",
    "return_type": "Number",
    "input": [
        {
            "number1": 0,
            "number2": 0
        },
        {
            "number1": "First number to sum",
            "number2": "Second number to sum"
        }
    ],
    "only_use_in_code": true,
    "npm_package_list": [
        "mathjs"
    ],
    "activate": false
}

(설명)

1) description
   - 해당 도구가 수행할 기능의 간단한 설명.
   - 예: "Sum two numbers."

2) instructions
   - 도구 사용 시 주의사항이나 입력 데이터 형태 등에 대한 안내사항 목록.
   - 예:
     - "float number is allowed."
     - "Negative numbers are not allowed"

3) return_description
   - 도구가 반환하는 값(리턴값)에 대한 설명.
   - 예: "Number of sum"

4) return_type
   - 반환값의 타입 지정 (예: Number, String, Boolean, Array, Object 등).

5) input
   - 도구 사용 시 필요한 입력 파라미터 정의.
   - 예:
       {
         "number1": 0,
         "number2": 0
       },
       {
         "number1": "First number to sum",
         "number2": "Second number to sum"
       }

6) only_use_in_code
   - 코드 생성 시에만 사용하도록 제한할지 여부 (true/false).

7) npm_package_list
   - 구현 시 필요한 NPM 패키지 목록.
   - 예: ["mathjs"]

8) activate
   - 도구의 활성화 여부 (true/false).
   - true 시 실제 에이전트에서 사용 가능.

----------------------------------------------------------------
2. 실제 도구(Javascript 파일) 구현
----------------------------------------------------------------

스펙에 정의된 내용을 토대로 실제 동작할 자바스크립트 파일을 작성합니다.
파일의 이름은 다음과 같은 형식을 따릅니다.

{toolName}.js

(예시 JS 코드)

async function tool({ number1, number2 }) {
    const mathjs = require('mathjs');
    const result = mathjs.add(number1, number2);
    console.log(`${number1} + ${number2} = ${result}`); // 출력을 통해 AI와의 대화 맥락에 포함하기 위함
    return result; // 코드와 맞물려 작동되는 경우를 위함
}

(주의사항)

1) 코드는 오직 함수 한 개로만 구성합니다.
2) export 키워드 등 다른 코드를 추가하거나, 함수 정의 외부에 어떤 코드도
   작성해서는 안 됩니다.
3) JSON의 input 배열에 정의된 파라미터 이름(number1, number2)과
   함수 매개변수가 반드시 일치해야 합니다.
4) npm_package_list에 명시된 패키지(require)는 반드시 함수 내부에서만 사용.

이 가이드를 바탕으로 필요한 사용자도구를 자유롭게 제작해보세요.

----------------------------------------------------------------
(End of Document)
----------------------------------------------------------------